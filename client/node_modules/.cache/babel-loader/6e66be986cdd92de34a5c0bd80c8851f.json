{"ast":null,"code":"import _defineProperty from \"/home/prashant/Projects/DevConnector-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_ALERT, REMOVE_ALERT } from '../actions/types';\nconst initialState = {\n  alerts: []\n};\n\nconst alert_reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_ALERT:\n      return _objectSpread({}, state, {\n        alerts: state.alerts.concat(action.data)\n      });\n\n    case REMOVE_ALERT:\n      const updatedAlerts = state.alerts.filter(alert => alert.id !== action.id);\n      return _objectSpread({}, state, {\n        alerts: updatedAlerts\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default alert_reducer;","map":{"version":3,"sources":["/home/prashant/Projects/DevConnector-master/client/src/reducers/alert.js"],"names":["SET_ALERT","REMOVE_ALERT","initialState","alerts","alert_reducer","state","action","type","concat","data","updatedAlerts","filter","alert","id"],"mappings":";;;;;;AACA,SAASA,SAAT,EAAoBC,YAApB,QAAwC,kBAAxC;AAEA,MAAMC,YAAY,GAAE;AAChBC,EAAAA,MAAM,EAAC;AADS,CAApB;;AAIA,MAAMC,aAAa,GAAC,CAACC,KAAK,GAACH,YAAP,EAAqBI,MAArB,KAA+B;AAE/C,UAAQA,MAAM,CAACC,IAAf;AACA,SAAKP,SAAL;AACE,+BACOK,KADP;AAEIF,QAAAA,MAAM,EAACE,KAAK,CAACF,MAAN,CAAaK,MAAb,CAAoBF,MAAM,CAACG,IAA3B;AAFX;;AAIF,SAAKR,YAAL;AACE,YAAMS,aAAa,GAAEL,KAAK,CAACF,MAAN,CAAaQ,MAAb,CAAoBC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaP,MAAM,CAACO,EAAjD,CAArB;AACA,+BACOR,KADP;AAEIF,QAAAA,MAAM,EAACO;AAFX;;AAIF;AACE,aAAOL,KAAP;AAbF;AAeH,CAjBD;;AAmBA,eAAeD,aAAf","sourcesContent":["\nimport { SET_ALERT, REMOVE_ALERT } from '../actions/types';\n\nconst initialState= {\n    alerts:[]\n}\n\nconst alert_reducer=(state=initialState, action)=> {\n     \n    switch (action.type) {\n    case SET_ALERT:      \n      return {\n          ...state,\n          alerts:state.alerts.concat(action.data)  \n      }\n    case REMOVE_ALERT:\n      const updatedAlerts= state.alerts.filter(alert => alert.id !== action.id);\n      return {\n          ...state,\n          alerts:updatedAlerts\n    }\n    default:\n      return state;\n  }\n}\n\nexport default alert_reducer;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}