{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAILURE, LOGIN_SUCCESS, LOGIN_FAILURE, LOGOUT, USER_LOADED, AUTH_ERROR } from './types';\nimport { setAlert } from './alert';\nimport axios from 'axios'; //for registration\n\nexport const register = (user, history) => dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify(user);\n  axios.post('/users/register', body, config).then(response => {\n    console.log(response);\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch(setAlert(\"You are successfully registered\", 'success'));\n    history.push('/login');\n  }).catch(err => {\n    console.log(err.response.data);\n    let errors = err.response.data;\n    dispatch({\n      type: REGISTER_FAILURE\n    });\n    errors.forEach(error => {\n      dispatch(setAlert(error.message, \"danger\"));\n    });\n  });\n}; //for login\n\nexport const login = user => dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify(user);\n  axios.post('/users/login', body, config).then(response => {\n    console.log(response.data);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      data: response.data\n    });\n    dispatch(setAlert(\"You are successfully logged in\", 'success'));\n  }).catch(err => {\n    console.log(err.response);\n    dispatch({\n      type: LOGIN_FAILURE\n    });\n    let error = err.response.data;\n    dispatch(setAlert(error, \"danger\"));\n  });\n}; //logout\n\nexport const logout = () => dispatch => {\n  axios.get('/users/logout').then(response => {\n    console.log(response);\n    dispatch({\n      type: LOGOUT\n    });\n  });\n}; //to load authenticated user\n\nexport const loadUser = () => dispatch => {\n  axios.get('/auth').then(response => {\n    console.log(response);\n    dispatch({\n      type: USER_LOADED,\n      data: response.data\n    });\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};","map":{"version":3,"sources":["/home/prashant/Projects/DevConnector-master/client/src/actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","USER_LOADED","AUTH_ERROR","setAlert","axios","register","user","history","dispatch","config","headers","body","JSON","stringify","post","then","response","console","log","type","push","catch","err","data","errors","forEach","error","message","login","logout","get","loadUser"],"mappings":"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","sourcesContent":["import {REGISTER_SUCCESS, REGISTER_FAILURE,LOGIN_SUCCESS,LOGIN_FAILURE,LOGOUT, USER_LOADED,AUTH_ERROR} from './types';\nimport {setAlert }from './alert';\nimport axios from 'axios';\n\n\n//for registration\nexport const register= (user, history)=> dispatch =>{\n    \n    const config= {\n        headers:{\n            'Content-Type':'application/json'\n        }\n    }\n    const body= JSON.stringify(user);\n\n    axios.post('/users/register',body, config).then((response)=> {\n        console.log(response);\n        dispatch({\n            type:REGISTER_SUCCESS\n        })\n        dispatch(setAlert(\"You are successfully registered\",'success'));\n        history.push('/login');\n        \n    }).catch(err=> {\n        console.log(err.response.data);\n        let errors= err.response.data;\n        dispatch({\n            type:REGISTER_FAILURE\n        })\n        errors.forEach(error=> {\n            dispatch(setAlert(error.message,\"danger\"));\n        })\n    })          \n}\n\n\n//for login\nexport const login= (user)=> dispatch =>{\n    \n    const config= {\n        headers:{\n            'Content-Type':'application/json'\n        }\n    }\n    const body= JSON.stringify(user);\n\n    axios.post('/users/login',body, config).then((response)=> {\n        console.log(response.data);\n        dispatch({\n            type:LOGIN_SUCCESS,\n            data:response.data\n        })\n        dispatch(setAlert(\"You are successfully logged in\",'success'));\n    }).catch(err=> {\n        console.log(err.response);\n        dispatch({\n            type:LOGIN_FAILURE\n        })\n        let error= err.response.data;\n        dispatch(setAlert(error,\"danger\"));\n        \n    })          \n}\n\n\n//logout\nexport const logout=()=> dispatch=> {\n    \n    axios.get('/users/logout').then(response=> {\n        console.log(response);\n        dispatch({\n            type:LOGOUT\n        })\n    })\n}\n\n\n//to load authenticated user\nexport const loadUser=()=> dispatch=> {\n    \n    axios.get('/auth').then(response=> {\n        console.log(response);\n        dispatch({\n            type:USER_LOADED,\n            data:response.data\n        })\n    }).catch(err=> {\n        console.log(err);\n        dispatch({\n            type:AUTH_ERROR,\n        })\n    })\n}\n"]},"metadata":{},"sourceType":"module"}